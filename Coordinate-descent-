import time                  # библиотека для работы с временем
gold = (1 + 5 ** 0.5) / 2    # константа золотое сечение

# инициализация переменных
eps = 0.0022                # допустимая погрешность решения
a1, b1 = 0.38, 1.77         # границы диапазона изменения координаты alpha1
a2, b2 = 1.3, 5.7           # границы диапазона изменения координаты alpha2
a3, b3 = 0.8, 2.1           # границы диапазона изменения координаты alpha3

# за начальную точку поиска примем середины диапазонов изменения координат
alpha1 = (a1 + b1) / 2      
alpha2 = (a2 + b2) / 2
alpha3 = (a3 + b3) / 2

iter_count = 0    # внутренний счётчик итераций поиска
# определение функций для поочерёдной фиксации координат

# alpha1 - незафиксированная, alpha2 и alpha3 - зафиксированные (координаты начальной точки поиска)
def func1(alpha1):    
    return abs((1.5 - alpha1 * (1 - alpha2)) ** 2 + (2.25 - alpha1 * (1 - alpha2 ** 2)) ** 2 - alpha3 ** 3)

# alpha2 - незафиксированная,
# alpha1 и alpha3 - зафиксированные (найденная координата точки минимума и координата начальной точки поиска)
def func2(alpha1, alpha2):    
    return abs((1.5 - alpha1 * (1 - alpha2)) ** 2 + (2.25 - alpha1 * (1 - alpha2 ** 2)) ** 2 - alpha3 ** 3)

# alpha3 - незафиксированная, alpha1 и alpha2 - зафиксированные (найденные координаты точки минимума)
def func3(alpha1, alpha2, alpha3):    
    return abs((1.5 - alpha1 * (1 - alpha2)) ** 2 + (2.25 - alpha1 * (1 - alpha2 ** 2)) ** 2 - alpha3 ** 3)

# функция, реализующая одномерную оптимизацию методом золотого сечения (МЗС)
# вход - выражение одномерной функции с нужными зафиксированными координатами, номер итерации метода, границы диапазона изменения координаты, текущее количество итераций

def golden_method(func, i, a, b, iter_count):   
    x1 = b - (b - a) / gold
    x2 = a + (b - a) / gold
    iter_count += 1
    while (b - a) / 2 >= eps:    # цикл с предусловием - критерием останова
        if i == 0:              # первая итерация поиска (когда ищем alpha1)
            if func(x1) > func(x2):
                a = x1
                x1 = x2
                x2 = b - (x1 - a)
                iter_count += 1
            elif func(x1) < func(x2):
                b = x2
                x2 = x1
                x1 = a + (b - x2)
                iter_count += 1
        elif i == 1:           # вторая итерация поиска (когда ищем alpha2)
            if func(alpha1, x1) > func(alpha1, x2):
                a = x1
                x1 = x2
                x2 = b - (x1 - a)
                iter_count += 1
                
            elif func(alpha1, x1) < func(alpha1, x2):
                b = x2
                x2 = x1
                x1 = a + (b - x2)
                iter_count += 1
        elif i == 2:           # третья итерация поиска (когда ищем alpha3)
            if func(alpha1, alpha2, x1) > func(alpha1, alpha2, x2):
                a = x1
                x1 = x2
                x2 = b - (x1 - a)
                iter_count += 1 
            elif func(alpha1, alpha2, x1) < func(alpha1, alpha2, x2):
                b = x2
                x2 = x1
                x1 = a + (b - x2)
                iter_count += 1
    return (a + b) / 2, iter_count   # выход - одна из координат точки 
                                       минимума и пройденное кол-во итераций

time_start = time.perf_counter()     # засекаем время начала поиска

# фиксируем координаты, кроме alpha1, и находим 1-ю координату точки минимума с помощью МЗС
alpha1, iter_count_1 = golden_method(func1, 0, a1, b1, iter_count)   

# фиксируем координаты, кроме alpha2, и находим 2-ю координату точки минимума с помощью МЗС
alpha2, iter_count_2 = golden_method(func2, 1, a2, b2, iter_count_1)

# фиксируем координаты, кроме alpha3, и находим 3-ю координату точки минимума с помощью МЗС
alpha3, iter_count_3 = golden_method(func3, 2, a3, b3, iter_count_2)

time_fin = time.perf_counter()      # засекаем время окончания поиска
time_spent = (time_fin - time_start) * 1000   # вычисляем затраченное время
# вывод найденных значений в консоль
print('Точка минимума: (', round(alpha1, 3), ',', round(alpha2, 3), ',', round(alpha3, 3), ')' )
print('Значение функции в точке минимума:', round(func3(alpha1, alpha2, alpha3), 3))
print('Число итераций:', iter_count_3)
print('Время, затраченное на поиск:', round(time_spent, 3), 'мс')
